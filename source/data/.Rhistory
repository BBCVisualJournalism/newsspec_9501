tmpdata <- sqldf(getSqlQuery(propertyType))
assign(paste('A_DATA_', propertyType, sep=''), tmpdata)
print(paste(propertyType, 'count', nrow(tmpdata)))
rm(tmpdata)
}
ons_postcode_translation_table <- read.csv('geography/ONSPD_FEB_2014_csv/Data/ONSPD_FEB_2014_UK.csv', header=TRUE)
names(ons_postcode_translation_table)
head(ons_postcode_translation_table)
tail(ons_postcode_translation_table)
ons_postcode_translation_table <- ons_postcode_translation_table[,c('pcd', 'osward', 'oslaua')]
ons_postcode_translation_table[,600:620]
ons_postcode_translation_table[600:620,]
ons_postcode_translation_table
View(ons_postcode_translation_table)
names(ons_postcode_translation_table)
ons_wards_codes_names <- read.csv('geography/Wards_(UK)_2013_Names_and_Codes/WD_DEC_2013_UK_NC.csv', header=TRUE)
head(ons_wards_codes_names)
ons_la_codes_names <- ons_postcode_translation_table
ons_postcode_to_ward_translation$pcd <- gsub(' ', '', ons_postcode_to_ward_translation$pcd)
ons_la_codes_names$pcd <- gsub(' ', '', ons_la_codes_names$pcd)
names(ons_la_codes_names)
AV_DATA_ALL <- data.frame()
AV_DATA_WARDS <- data.frame()
for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward, WD13NM osname
FROM tmpdfpc, ons_postcode_to_ward_translation
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, WD13NM osname, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_postcode_to_ward_translation
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
# get all totals per postcode per year
# group all by property type
AV_DATA_ALL <- data.frame()
AV_DATA_WARDS <- data.frame()
for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward, WD13NM osname
FROM tmpdfpc, ons_la_codes_names
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, WD13NM osname, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_la_codes_names
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
# get all totals per postcode per year
# group all by property type
AV_DATA_ALL <- data.frame()
AV_DATA_WARDS <- data.frame()
for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward
FROM tmpdfpc, ons_la_codes_names
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_la_codes_names
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
breakbyyear <- sqldf('select Year, count(*) from AV_DATA_WARDS group by Year')
breakbyyear
View(AV_DATA_WARDS)
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000038',]
write.csv(AV_DATA_WARDS, 'geography/fulldata_with_la.csv')
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E05000027' && Year == 2012,]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E05000027',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000027',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E14000862',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000049',]
View(`D2004`)
rm(list=ls())
# source - http://data.gov.uk/dataset/crime_statistics
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/crime_stats/data')
datafiles <- list.files(pattern='*.csv')
update_columns <- function (df) {
colnames(df) <- gsub('\\.', '_', names(df))
return(df)
}
getsubset <- function (df, filters) {
return(df[,filters])
}
datafiles
crimestatsla <- update_columns(read.csv(datafiles[1]))
# crimestatspa <- update_columns(read.csv(datafiles[2]))
filter_list <- c('X12_months_ending', 'Local_authority', 'ONS_LA_code', 'Police_force_area', 'ONS_PFA_code', 'Offence', 'Rolling_year_total_number_of_offences')
crimestatsla <- getsubset(crimestatsla, filter_list)
View(crimestatsla)
colnames(crimestatsla) <- c('date', 'la_name', 'la_code', 'pfa_name', 'pfa_code', 'offence', 'rolling_total')
# subset sussex only data
hastings <- crimestatsla[crimestatsla$la_name == 'Hastings',]
boxplot(hastings$rolling_total~hastings$offence)
sqldf('select count(distinct Local_authority) from crimestatsla')
library(sqldf)
sqldf('select count(distinct Local_authority) from crimestatsla')
sqldf('select count(distinct la_name) from crimestatsla')
sqldf('select count(distinct pfa_name) from crimestatsla')
View(hastings)
hastings[hastings$offence == 'Homicide',]
hastings[hastings$offence == 'Public order offences',]
# source - http://data.gov.uk/dataset/crown-prosecution-service-case-outcomes-by-principal-offence-category-data
# http://www.cps.gov.uk/data/case_outcomes/september_2012/principal_offence_category_september_2012.csv
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/cps_principal_offence/data')
base_df <- data.frame()
for( file in list.files()) {
file_name <- gsub('principal_offence_category', 'poc', gsub('.csv', '', file))
# get data and assign to dataframe variable
dataframe <- read.csv(file)
# remove dots column names and replace with _ for readability
colnames(dataframe) <- gsub('\\.', '_', colnames(dataframe))
dataframe$publish_date <- gsub('poc_', '', file_name)
base_df <- rbind(base_df, dataframe)
# remove .csv extension from the file name
# shorten the name to poc
# use processed filename as variable name
# assign it the value of dataframe
assign(file_name , dataframe)
}
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/cps_principal_offence/data')
base_df <- data.frame()
for( file in list.files()) {
file_name <- gsub('principal_offence_category', 'poc', gsub('.csv', '', file))
# get data and assign to dataframe variable
dataframe <- read.csv(file)
# remove dots column names and replace with _ for readability
colnames(dataframe) <- gsub('\\.', '_', colnames(dataframe))
dataframe$publish_date <- gsub('poc_', '', file_name)
base_df <- rbind(base_df, dataframe)
# remove .csv extension from the file name
# shorten the name to poc
# use processed filename as variable name
# assign it the value of dataframe
assign(file_name , dataframe)
rm(list=ls())
}
unique(hastings$offence)
library(XLConnect)
library(sqldf)
weekno <- 'week18'
setwd(paste('/Users/mpinir02/Sites/news/special/2013/newsspec_6185/tools/data/', weekno, sep=''))
projectFiles <- list.files(pattern='*.xls*')
# @TODO - halt execution of code on error
if (length(projectFiles) != 2) stop(paste('Expecting exactly 2 data files but have identified', length(projectFiles), 'data files'))
# load workbooks
for(file in projectFiles) {
variableName <- 'ae_performance_wb'
if (substring(file, 1, 5) == 'Daily') variableName <- 'dailysitrep'
assign(variableName, loadWorkbook(file))
}
# get indicator data from given worksheet
getkpiData <- function (worksheetName) {
kpiData <- readWorksheet(dailysitrep, sheet = worksheetName)
return(kpiData[17:173,])
}
characterToNumeric <- function (x) { return(as.integer(x)) }
nhs.filter <- function (df, filters) df[,filters]
#ambulances data
ambulances <- getkpiData('Ambulances queuing')
colnames(ambulances) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i")
ambulances$e <- characterToNumeric(ambulances$e)
ambulances$f <- characterToNumeric(ambulances$f)
ambulances$g <- characterToNumeric(ambulances$g)
ambulances$h <- characterToNumeric(ambulances$h)
ambulances$i <- characterToNumeric(ambulances$i)
ambulances$ambulances_queuing <- rowSums(ambulances[,5:9])
ambulances <- nhs.filter(ambulances, c('code', 'ambulances_queuing'))
#Cancelled operations data
cancelled_operations <- getkpiData("Cancelled operations")
colnames(cancelled_operations) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s")
# cancelled_operations <- sqldf("SELECT code, name, g, j, m, p, s FROM cancelled_operations")
cancelled_operations <- nhs.filter(cancelled_operations, c('code', 'name', 'g', 'j', 'm', 'p', 's'))
cancelled_operations$g <- characterToNumeric(cancelled_operations$g)
cancelled_operations$j <- characterToNumeric(cancelled_operations$j)
cancelled_operations$m <- characterToNumeric(cancelled_operations$m)
cancelled_operations$p <- characterToNumeric(cancelled_operations$p)
cancelled_operations$s <- characterToNumeric(cancelled_operations$s)
cancelled_operations$cancelled_operations <- rowSums(cancelled_operations[,3:7], na.rm = TRUE)
cancelled_operations <- nhs.filter(cancelled_operations, c('code', 'name', 'cancelled_operations'))
#Delayed transfers of care
dtoc <- getkpiData("Delayed transfers of care")
colnames(dtoc) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i")
dtoc <- nhs.filter(dtoc, c('code', 'e', 'f', 'g', 'h', 'i'))
dtoc$e <- characterToNumeric(dtoc$e)
dtoc$f <- characterToNumeric(dtoc$f)
dtoc$g <- characterToNumeric(dtoc$g)
dtoc$h <- characterToNumeric(dtoc$h)
dtoc$i <- characterToNumeric(dtoc$i)
dtoc$dtoc <- rowSums(dtoc[,2:6], na.rm = TRUE)
dtoc <- nhs.filter(dtoc, c('code', 'dtoc'))
#D&V, Norovirus
norovirus <- getkpiData("D&V, Norovirus")
colnames(norovirus) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n")
norovirus <- nhs.filter(norovirus, c('code', 'name', 'e', 'g', 'i', 'k', 'm'))
norovirus$e <- as.integer(norovirus$e)
norovirus$g <- as.integer(norovirus$g)
norovirus$i <- as.integer(norovirus$i)
norovirus$k <- as.integer(norovirus$k)
norovirus$m <- as.integer(norovirus$m)
norovirus$norovirus <- rowSums(norovirus[,3:7])
norovirus <- nhs.filter(norovirus, c('code', 'norovirus'))
# merge all data frames together
nhs_sitrep <- sqldf("SELECT *
FROM ambulances NATURAL JOIN cancelled_operations NATURAL JOIN dtoc NATURAL JOIN norovirus
WHERE ambulances_queuing <> 'NA' AND code <> '-'")
nhs_sitrep <- nhs.filter(nhs_sitrep, c('code', 'name', 'ambulances_queuing', 'cancelled_operations',  'dtoc', 'norovirus'))
# load A&E Performance data set
# preprocessing - ensure no comma separator for numbers
ae_performance <- readWorksheet(ae_performance_wb, sheet = "A&E Data")
ae_performance <- ae_performance[18:268,]
colnames(ae_performance) <- c("a", "b",
"perf_code",
"perf_name",
"attendances_total",
"f", "g", "h",
"attendance_over4hrs", "j", "k",
"percent_seen_under4hrs", "m",
"admission_total", "o", "p", "q", "decision_admission_4to12hrs", "s")
ae_performance <- sqldf("SELECT perf_code,
perf_name,
attendances_total,
attendance_over4hrs,
percent_seen_under4hrs,
admission_total,
decision_admission_4to12hrs
FROM ae_performance
WHERE attendances_total != 0")
ae_performance$attendances_total <- as.integer(gsub(',', '', ae_performance$attendances_total))
ae_performance$attendance_over4hrs <- as.integer(gsub(',', '', ae_performance$attendance_over4hrs))
ae_performance$admission_total <- as.integer(gsub(',', '', ae_performance$admission_total))
ae_performance$decision_admission_4to12hrs <- as.integer(gsub(',', '', ae_performance$decision_admission_4to12hrs))
nhs_data <- sqldf("SELECT *
FROM ae_performance, nhs_sitrep
WHERE charindex(code, perf_code) == 1")
nhs_data <- nhs.filter(nhs_data, c('code',
'name',
'attendances_total',
'attendance_over4hrs',
'percent_seen_under4hrs',
'admission_total',
'decision_admission_4to12hrs',
'ambulances_queuing',
'cancelled_operations',
'dtoc',
'norovirus'))
# get england totals from the 144 observations in nhs_data
nhs_data_england <- sqldf("SELECT avg(attendance_over4hrs) mean_attendance_over4hrs,
avg(decision_admission_4to12hrs) mean_decision_admission_4to12hrs,
sum(ambulances_queuing) ambulances_queuing,
avg(ambulances_queuing) mean_ambulances_queuing,
avg(cancelled_operations) mean_cancelled_operations,
avg(dtoc) mean_dtoc,
avg(norovirus) mean_norovirus
FROM nhs_data")
# write data to disk
write.csv(nhs_data, 'nhs_dataset.csv')
write.csv(nhs_data_england, 'nhs_dataset_england.csv')
# trust code column not required for the data download file
nhs_data$code <- NULL
# reassign column names for data download file available via /news/special/2013/newsspec_6544/inc/main.inc
colnames(nhs_data) <- c('Trust',
'Attendance total',
'More than 4 hour wait to be admitted',
'Seen under 4 hours (%)',
'Emergency Admissions',
'Trolley wait of 4-12 hours',
'Ambulances queuing',
'Cancelled elective operations',
'Beds blocked',
'Bed days lost to norovirus')
write.csv(nhs_data, paste('datafordownload', weekno, '.csv', sep=''))
#clean up environment
rm(list=ls())
ls()
setwd("~/Documents/mpini/playground_untracked/python/webcrawler/smmt_co_uk")
library(XLConnect)
library(reshape2)
filelist <- list.files(path='unziplocation', pattern='*2014.xls*')
#     ignore list <- c('Scrappage', 'PressReleaseSIS', '')
#     2,3,
#     get index of Abarth
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
dataset$date <- gsub('[Cars _ .xls]', '', file)
print(paste('************', file, '**************'))
vehicleReg <- rbind(vehicleReg, dataset)
}
}
filelist <- list.files(path='unziplocation', pattern='*2014.xls*')
filelist <- list.files(path='unziplocation', pattern='*2014.xls*')
filelist
filelist <- list.files(path='unziplocation', pattern='Cars_*2014.xls*')
filelist
filelist <- list.files(path='unziplocation', pattern='Cars_**_2014.xls*')
filelist <- list.files(path='unziplocation', pattern='*_2014.xls*')
filelist <- list.files(path='unziplocation', pattern='Cars_*')
filel
filelist
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
dataset$date <- gsub('[Cars _ .xls]', '', file)
print(paste('************', file, '**************'))
vehicleReg <- rbind(vehicleReg, dataset)
}
}
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
dataset$date <- gsub('[Cars _ .xls]', '', file)
print(paste('************', file, '**************'))
csv.write(dataset, paste('csvlist/year_', gsub('[Cars _ .xls]', '', file), '.csv', sep=''), row.names=F)
vehicleReg <- rbind(vehicleReg, dataset)
}
}
filelist <- list.files(path='unziplocation', pattern='Cars_*')
#     ignore list <- c('Scrappage', 'PressReleaseSIS', '')
#     2,3,
#     get index of Abarth
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
dataset$date <- gsub('[Cars _ .xls]', '', file)
print(paste('************', file, '**************'))
csv.write(dataset, paste('csvlist/year_', gsub('[Cars _ .xls]', '', file), '.csv', sep=''), row.names=F)
vehicleReg <- rbind(vehicleReg, dataset)
}
}
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
dataset$date <- gsub('[Cars _ .xls]', '', file)
print(paste('************', file, '**************'))
#         csv.write(dataset, paste('csvlist/year_', gsub('[Cars _ .xls]', '', file), '.csv', sep=''), row.names=F)
vehicleReg <- rbind(vehicleReg, dataset)
}
}
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
year <- gsub('[Cars _ .xls]', '', file)
dataset$date <- year
print(paste('************', file, '**************'))
csv.write(dataset, paste('csvlist/year_', year, '.csv', sep=''), row.names=F)
vehicleReg <- rbind(vehicleReg, dataset)
}
}
vehicleReg <- data.frame()
for(file in filelist) {
spreadsheet <- loadWorkbook(paste('unziplocation/', file, sep=''))
dataset <- readWorksheet(spreadsheet, sheet=getSheets(spreadsheet)[1])
if (colnames(dataset) == c('REGISTRATIONS.OF.NEW.CARS.IN.THE.UNITED.KINGDOM...BY.MARQUE', 'Col2')) {
dataset <- dataset[4:nrow(dataset)-1,c(1:2)]
colnames(dataset) <- c('make', 'count')
year <- gsub('[Cars _ .xls]', '', file)
dataset$date <- year
print(paste('************', file, '**************'))
write.csv(dataset, paste('csvlist/year_', year, '.csv', sep=''), row.names=F)
vehicleReg <- rbind(vehicleReg, dataset)
}
}
setwd("~/Sites/bbc/news/special/2014/newsspec_9501/source/data")
library(XLConnect)
library(rjson)
write(getwd(), 'test.txt')
weekIndex <- 4
weekWorkingDirectory <- paste(getwd(), '/week', weekIndex, sep='')
weekWorkingDirectory
dir.create(weekWorkingDirectory, showWarnings=F)
weeklyAeSitrepDataUrl <- 'http://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2014/04/2014.11.30-AExtqh8.xls'
download.file(weeklyAeSitrepDataUrl, './spreadsheet')
weeklyAeSitrep <- readWorksheet(loadWorkbook('./spreadsheet'), sheet='A&E Data')
colnames(weeklyAeSitrep) <- gsub(' ', '_', gsub('[-()<>.&/]', '', weeklyAeSitrep[15,]))
weeklyAeSitrep <- weeklyAeSitrep[,-2]
print(colnames(weeklyAeSitrep) == c("Area_Team", "Code", "Name", "Type_1_Departments__Major_AE", "Type_2_Departments__Single_Specialty", "Type_3_Departments__Other_AEMinor_Injury_Unit", "Total_attendances", "Type_1_Departments__Major_AE.1", "Type_2_Departments__Single_Specialty.1", "Type_3_Departments__Other_AEMinor_Injury_Unit.1", "Percentage_in_4_hours_or_less_type_1", "Percentage_in_4_hours_or_less_all", "Emergency_Admissions_via_Type_1_AE", "Emergency_Admissions_via_Type_2_AE", "Emergency_Admissions_via_Type_3_and_4_AE", "Other_Emergency_admissions_ie_not_via_AE", "Number_of_patients_spending_4_hours_but_12_hours_from_decision_to_admit_to_admission", "Number_of_patients_spending_12_hours_from_decision_to_admit_to_admission"))
weeklyAeSitrep$Code <- gsub(' ','', weeklyAeSitrep$Code)
weeklyAeSitrep <- weeklyAeSitrep[18:nrow(weeklyAeSitrep), c(2, 3, 4, 8, 11, 13, 17)]
weeklyAeSitrep <- weeklyAeSitrep[!is.na(weeklyAeSitrep$Name) & weeklyAeSitrep$Name != '',]
colnames(weeklyAeSitrep) <- c('code','name','attendances_at_ane','patients_waiting_over_4hrs_tobe_admitted','patients_seen_in_four_hours','emergency_admissions','trolley_wait_4_to_12hrs')
weeklyAeSitrep$attendances_at_ane <- as.numeric(gsub(',', '', weeklyAeSitrep$attendances_at_ane))
weeklyAeSitrep$patients_waiting_over_4hrs_tobe_admitted <- as.numeric(gsub(',', '', weeklyAeSitrep$patients_waiting_over_4hrs_tobe_admitted))
weeklyAeSitrep$patients_seen_in_four_hours <- as.numeric(gsub('%', '', weeklyAeSitrep$patients_seen_in_four_hours))
weeklyAeSitrep$emergency_admissions <- as.numeric(gsub(',', '', weeklyAeSitrep$emergency_admissions))
weeklyAeSitrep$trolley_wait_4_to_12hrs <- as.numeric(gsub(',', '', weeklyAeSitrep$trolley_wait_4_to_12hrs))
# weeklyAeSitrep[,1:2]
# test <- weeklyAeSitrep[!is.na(weeklyAeSitrep$Name) & weeklyAeSitrep$Name != '',]
# test[,1:2]
# weeklyAeSitrep <- weeklyAeSitrep[,]
weeklyAeSitrep <- weeklyAeSitrep[ weeklyAeSitrep$attendances_at_ane != 0, ]
# if number of complete cases is not equal to number of observations then halt execution with error code
if (length(complete.cases(weeklyAeSitrep)) != nrow(weeklyAeSitrep)) {
print('We have some nulls in the dataset')
# if number of complete cases is not equal to number of observations then halt execution with error code
}
# construct england weekly figures
englandWeeklySitreps <- data.frame(code='england', name='england')
englandWeeklySitreps <- cbind(englandWeeklySitreps, as.data.frame(t(colSums(weeklyAeSitrep[,3:ncol(weeklyAeSitrep)]))))
englandWeeklySitreps$patients_waiting_over_4hrs_tobe_admitted <- round(mean(weeklyAeSitrep$patients_waiting_over_4hrs_tobe_admitted))
englandWeeklySitreps$trolley_wait_4_to_12hrs <- round(mean(weeklyAeSitrep$trolley_wait_4_to_12hrs))
weeklyAeSitrep <- rbind(weeklyAeSitrep, englandWeeklySitreps)
rownames(weeklyAeSitrep) <- weeklyAeSitrep[,1]
weeklyAeSitrep <- weeklyAeSitrep[,-1]
jsonString <- toJSON(as.data.frame(t(weeklyAeSitrep)))
# weekly ae sitrep data
write(jsonString, paste(weekWorkingDirectory, '/weekly_ae_sitrep.json', sep=''))
tempfile <- tempfile()
tempfile
b <- tempfile()
b
ls()
rm(tempfile)
ls()
